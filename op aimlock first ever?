-- Aimlock configuration
getgenv().OldAimPart = "UpperTorso"
getgenv().AimPart = "UpperTorso" -- For R15 Games: {UpperTorso, LowerTorso, HumanoidRootPart, Head} | For R6 Games: {Head, Torso, HumanoidRootPart}  
getgenv().AimlockKey = "c"
getgenv().AimRadius = 30 -- How far away from someone's character you want to lock on at
getgenv().ThirdPerson = true 
getgenv().FirstPerson = true
getgenv().TeamCheck = false -- Check if Target is on your Team (True means it won't lock onto your teammates, false is vice versa)
getgenv().PredictMovement = true -- Predicts if they are moving in fast velocity (like jumping) so the aimbot will go a bit faster to match their speed 
getgenv().PredictionVelocity = 6.612
getgenv().CheckIfJumped = true
getgenv().Smoothness = false
getgenv().SmoothnessAmount = 0.030

local Players, Uis, RService, SGui = game:GetService("Players"), game:GetService("UserInputService"), game:GetService("RunService"), game:GetService("StarterGui")
local Client, Mouse, Camera, CF, RNew, Vec3, Vec2 = Players.LocalPlayer, Players.LocalPlayer:GetMouse(), workspace.CurrentCamera, CFrame.new, Ray.new, Vector3.new, Vector2.new
local Aimlock, MousePressed, CanNotify = false, false, false
local AimlockTarget

-- GUI creation function
local function createGui()
    local player = game.Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")

    local screenGui = playerGui:FindFirstChild("CustomScreenGui")
    if not screenGui then
        screenGui = Instance.new("ScreenGui")
        screenGui.Name = "CustomScreenGui"
        screenGui.Parent = playerGui
    end

    local button = screenGui:FindFirstChild("ToggleAimlockButton")
    if not button then
        button = Instance.new("TextButton")
        button.Name = "ToggleAimlockButton"
        button.Size = UDim2.new(0, 100, 0, 40)
        button.BackgroundColor3 = Color3.fromRGB(255, 102, 102) -- Light red
        button.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
        button.Text = "Aimlock"
        button.Font = Enum.Font.SourceSansBold
        button.TextSize = 20
        button.BorderSizePixel = 0
        button.BackgroundTransparency = 0.3
        button.Parent = screenGui

        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 10)
        corner.Parent = button

        button.Draggable = true
        button.Selectable = true
        button.Active = true

        -- Load saved position if exists
        local savedPosition = player:FindFirstChild("SavedPosition")
        if savedPosition then
            button.Position = savedPosition.Value
        else
            button.Position = UDim2.new(0.5, -50, 0.5, -20)
        end

        local function savePosition()
            local savedPos = player:FindFirstChild("SavedPosition")
            if not savedPos then
                savedPos = Instance.new("Vector3Value")
                savedPos.Name = "SavedPosition"
                savedPos.Parent = player
            end
            savedPos.Value = button.Position
        end

        button.MouseButton1Up:Connect(function()
            Aimlock = not Aimlock -- Toggle aimlock state
            if Aimlock then
                button.BackgroundColor3 = Color3.fromRGB(102, 255, 102) -- Green when active
                button.Text = "Aimlock On"
                AimlockTarget = GetNearestTarget() -- Get the nearest target when activated
            else
                button.BackgroundColor3 = Color3.fromRGB(255, 102, 102) -- Red when inactive
                button.Text = "Aimlock Off"
                AimlockTarget = nil -- Clear target when deactivating
            end
            savePosition()
        end)
    end
end

-- Function to set up GUI on player respawn
local function setupGuiOnRespawn()
    createGui()

    game.Players.LocalPlayer.CharacterAdded:Connect(function()
        createGui()
    end)
end

setupGuiOnRespawn()

if game.Players.LocalPlayer then
    setupGuiOnRespawn()
end

-- Additional aimlock functions

getgenv().WorldToViewportPoint = function(P)
    return Camera:WorldToViewportPoint(P)
end

getgenv().WorldToScreenPoint = function(P)
    return Camera.WorldToScreenPoint(Camera, P)
end

getgenv().GetObscuringObjects = function(T)
    if T and T:FindFirstChild(getgenv().AimPart) and Client and Client.Character:FindFirstChild("Head") then 
        local RayPos = workspace:FindPartOnRay(RNew(T[getgenv().AimPart].Position, Client.Character.Head.Position))
        if RayPos then return RayPos:IsDescendantOf(T) end
    end
end

getgenv().GetNearestTarget = function()
    local players = {}
    local PLAYER_HOLD = {}
    local DISTANCES = {}
    for i, v in pairs(Players:GetPlayers()) do
        if v ~= Client then
            table.insert(players, v)
        end
    end
    for i, v in pairs(players) do
        if v.Character ~= nil then
            local AIM = v.Character:FindFirstChild("Head")
            if getgenv().TeamCheck == true and v.Team ~= Client.Team then
                local DISTANCE = (v.Character:FindFirstChild("Head").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
                local RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE)
                local HIT, POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                local DIFF = math.floor((POS - AIM.Position).magnitude)
                PLAYER_HOLD[v.Name .. i] = {}
                PLAYER_HOLD[v.Name .. i].dist = DISTANCE
                PLAYER_HOLD[v.Name .. i].plr = v
                PLAYER_HOLD[v.Name .. i].diff = DIFF
                table.insert(DISTANCES, DIFF)
            elseif getgenv().TeamCheck == false and v.Team == Client.Team then 
                local DISTANCE = (v.Character:FindFirstChild("Head").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
                local RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE)
                local HIT, POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                local DIFF = math.floor((POS - AIM.Position).magnitude)
                PLAYER_HOLD[v.Name .. i] = {}
                PLAYER_HOLD[v.Name .. i].dist = DISTANCE
                PLAYER_HOLD[v.Name .. i].plr = v
                PLAYER_HOLD[v.Name .. i].diff = DIFF
                table.insert(DISTANCES, DIFF)
            end
        end
    end
    
    if unpack(DISTANCES) == nil then
        return nil
    end
    
    local L_DISTANCE = math.floor(math.min(unpack(DISTANCES)))
    if L_DISTANCE > getgenv().AimRadius then
        return nil
    end
    
    for i, v in pairs(PLAYER_HOLD) do
        if v.diff == L_DISTANCE then
            return v.plr
        end
    end
    return nil
end

RService.RenderStepped:Connect(function()
    if Aimlock then
        if AimlockTarget == nil then
            AimlockTarget = GetNearestTarget() -- Get a new target if there's no current target
        end
        if AimlockTarget and AimlockTarget.Character and AimlockTarget.Character:FindFirstChild(getgenv().AimPart) then 
            if getgenv().FirstPerson == true then
                if getgenv().PredictMovement == true then
                    local Main = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position) * CF(0, 0, getgenv().PredictionVelocity)
                    Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount)
                else
                    Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position)
                end
            end
            if getgenv().ThirdPerson == true then
                if getgenv().PredictMovement == true then
                    local Main = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position) * CF(0, 0, getgenv().PredictionVelocity)
                    Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount)
                else
                    Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position)
                end
            end
        else
            AimlockTarget = nil -- Clear target if it's no longer valid
        end
    end
end)
